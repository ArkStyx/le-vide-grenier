
JAVA WHEN TO USE ABSTRACT CLASS VS INTERFACE :

https://www.tutorialspoint.com/when-to-use-an-abstract-class-and-when-to-use-an-interface-in-java

If the functionality we are creating will be useful across a wide range of disparate objects, use an interface. 
Abstract classes should be used primarily for objects that are closely related, whereas interfaces are best suited for providing a common functionality to unrelated classes.
Interfaces are a good choice when we think that the API will not change for a while.
Interfaces are also good when we want to have something similar to multiple inheritances since we can implement multiple interfaces.
If we are designing small, concise bits of functionality, use interfaces. If we are designing large functional units, use an abstract class.

---------------------------
---------------------------

https://www.baeldung.com/java-interface-vs-abstract-class

Consider using the interface when our problem makes the statement “A is capable of [doing this]”. 
For example, “Clonable is capable of cloning an object”, “Drawable is capable of drawing a shape”, etc.

Consider using abstract classes and inheritance when our problem makes the evidence “A is a B”. 
For example, “Dog is an Animal”, “Lamborghini is a Car”, etc.

------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------

https://blog.paumard.org/cours/jpa/chap05-heritage-entite.html

---------------------------
---------------------------





---------------------------------------------------------------------------------------------------------
-----									CONNAISSANCES DE BASE										-----
---------------------------------------------------------------------------------------------------------

APRES AVOIR INSTALLER JAVA ET MAVEN, IL FAUT CREER LES VARIABLES "JAVA_HOME" et "M3_HOME" en respectant les conditions suivantes :

https://stackoverflow.com/a/51621901
Following is the best way to get of the issue , check following on classpath:
Make sure JAVA_HOME system variable must have till jdk e.g C:\Program Files\Java\jdk1.7.0_80 , don't append bin here.
Because MAVEN will look for jre which is under C:\Program Files\Java\jdk1.7.0_80
Set %JAVA_HOME%\bin in classpath .
Then try Maven version .

---------------------------
---------------------------

AFFICHER LA VERSION DE JAVA :
javac -version

AFFICHER LA VERSION DE MAVEN :
mvn -version

---------------------------
---------------------------

https://stackoverflow.com/questions/57815240/is-there-a-way-to-open-the-simple-sql-editor-in-eclipse-by-default

Now listed as an answer, by popular demand (albeit one).
I'm not familiar with these editors but it may be possible to change the default editor for the file type in the Preferences in 'General > Editors > File Associations'.
Yes that's the ticket. 
In File Associations, under File Types, select *.sql, then below select Add... find SQL Editor, Ok, and then select the SQL Editor newly added to the Associated Editors list, and then hit the Default button. 
It now appears as SQL Editor (default). Apply and Close, and done. 

---------------------------
---------------------------

https://stackoverflow.com/questions/98610/how-can-i-get-eclipse-to-show-files

In the package explorer, in the upper right corner of the view, there is a little down arrow. Tool tip will say view menu. 
From that menu, select filters
filters menu
From there, uncheck .* resources.

So Package Explorer -> View Menu -> Filters -> uncheck .* resources.

With Eclipse Kepler and OS X this is a bit different:
Package Explorer -> Customize View -> Filters -> uncheck .* resources

------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------

JAVA REACTIVE PROGRAMMING :

https://medium.com/@cheron.antoine/reactor-java-1-how-to-create-mono-and-flux-471c505fa158

https://www.techtarget.com/searchapparchitecture/definition/reactive-programming

https://www.codemotion.com/magazine/backend/benefits-of-reactive-programming-codemotion-magazine/

---------------------------
---------------------------

JUNIT 4 VERS JUNIT 5
https://www.baeldung.com/junit-5-runwith




















